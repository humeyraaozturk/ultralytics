# Parameters
nc: 4 # number of classes
scales: 
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768] 
  l: [1.00, 1.00, 512] 
  x: [1.00, 1.25, 512] 

backbone:
  # [from, repeats, module, args]
  - [ -1, 1, Conv, [64, 6, 2, 2] ]        
  - [ -1, 1, Conv, [128, 3, 2] ]          
  - [ -1, 2, C2f, [128, True] ]           
  - [ -1, 1, Conv, [256, 3, 2] ]          
  - [ -1, 3, C3, [256] ]                  
  - [ -1, 1, Conv, [512, 3, 2] ]          
  - [ -1, 3, C2f, [512, True] ]           
  - [ -1, 1, Conv, [1024, 3, 2] ]         
  - [ -1, 1, C3, [1024] ]                 
  - [ -1, 1, SPPF, [1024, 5] ]        

head:
  # P5 -> P4
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]         
  - [[-1, 6], 1, Concat, [1]]                          
  - [-1, 3, C2f, [512, True]]

  # P4 -> P3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]]                          
  - [-1, 3, C2f, [256, True]]

  # Downsample: P3 -> P4
  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]]                         
  - [-1, 3, C2f, [512, True]]

  # Downsample: P4 -> P5
  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]]                         
  - [-1, 3, C2f, [1024, True]]

  # Detect head (P3, P4, P5) using YOLOEDetect
  - [[15, 18, 21], 1, Detect, [nc]]
